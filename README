Prerequisites:
--------------
	- Python 2 (version 2.7.3 proven to work)

		# apt-get install python2.7

	- Django (version 1.4.1 proven to work)

		# pip install Django==1.4.1
		OR a newer version, such as
		# pip install Django==1.5.4

	- a web server (example relevant configuration is shown for Apache 2) 
		able to handle WSGI

		# apt-get install libapache2-mod-wsgi


How to set up the transcription environment on the server:
----------------------------------------------------------

# Update the localsettings.py config file (create this by copying 
	localsettings.py.example) to suit your environment. Meaning and format of 
	all configuration variables should be clear from the comments in 
	localsettings.py.

# Run scripts/inst_templates.py.

# Set up your webserver to find your new transcription web application. For 
	Apache, this can be done by inserting a snippet like the following to
		/etc/apache2/sites-available/default
	and
		/etc/apache2/sites-enabled/000-default
		(which is by default a symlink to the former file)
	below the root <VirtualHost> element:

		WSGIDaemonProcess app_transcript python-path=/webapps/:/webapps/transcription
		WSGIScriptAlias /apps/transcription /webapps/transcription/wsgi.py
		<Location /apps/transcription>
			WSGIProcessGroup app_transcript
		</Location>

	This particular configuration would make the Apache webserver associate 
	the <hostname>/apps/transcription URL with the application directory 
	/webapps/transcription, affecting where the wsgi.py script and other 
	Python modules used by the app are looked for.

# Create the database (following is pseudocode, do NOT copy & paste it 
	to your terminal):

	cd /webapps/transcription && ./manage.py syncdb
	# You will be asked to enter your superuser details.

	Make sure the access permissions are set correctly for directories used 
	by Django.  This can mean you need to issue the following commands:

	# PROJECT_PATH=/webapps/transcription
	# chown www-data $PROJECT_PATH/db $PROJECT_PATH/db/trss.db \
		$PROJECT_PATH/data/{,import,lists}

# Collect static files using the following command:

	$ cd $PROJECT_PATH && ./manage.py collectstatic
	# You may be asked to confirm you want to override existing files. In 
	# a clean installation, with the default setting of STATIC_ROOT, this 
	# warning is a false alarm. If there were static files collected, they 
	# would be overwritten, but there are none.

# Restart Apache, open the site URL, and log in with the superuser account 
  you created.


How to set up transcription via Crowdflower:
--------------------------------------------

# Make sure USE_CF is set to True in localsettings.

# Update all other related configuration, including CF_KEY (should be 
  provided by Crowdflower for your account).

# Create a new Crowdflower job, either one for all transcriptions, or 
	a couple of, for different price levels. You want to fill out appropriate 
	job names and instructions; a workable contents for the main part of 
	a Crowdflower job are included in the file 
	transcription/templates/crowdflower/job.cml (generated by running 
	scripts/inst_templates.py above).

	The dialogue prices are computed using the configuration variables 
	PRICE_CONST, PRICE_PER_MIN, and PRICE_PER_TURN. If you change your mind 
	about these constants any time later, you can reconfigure Django and have 
	it recompute dialogue prices by using the Update Price action in the 
	Dialogues admin view.
	
	Having created the Crowdflower jobs, you need to tell Django about them 
	using a configuration variable, either CF_JOB_ID, or CF_JOB_IDS.

# You can choose to upload all dialogues imported into the application to 
	Crowdflower right away (use the checkbox on the import page) or you can 
	do so any time later using the Upload to Crowdflower action from the 
	Dialogues admin page.

# Set up all other required settings on Crowdflower and order your jobs.  
	The important settings include country and skills filters. If you want to 
	get logs of the work done, and worker IDs logged in XML logs, set the 
	webhook to <app_url>/log-work for your jobs. For this, the application 
	assumes each job page contains only one work item.

# If fully annotated transcription elements are desired also for gold 
	units, fire gold hooks (an option in the main menu) when finished with 
	the job, just in case the job_complete webhook from CrowdFlower did not 
	fire.


How to import dialogues:
------------------------

# Make the dialogue log directories available at the server's filesystem.
	If the dialogue logs are on a remote filesystem, you can use the
	fetch_dgdir.sh script (from the `scripts' directory) to achieve this. The
	script also creates a list of imported dialogues for you, so you can then
	skip the next step.
	
	For using the `fetch_dgdir.sh' script, you need to:
		1. create a directory with dialogue logs as its immediate children at
			 the remote filesystem;
		2. (optional) pack the directory;
		3. run the script at the target server; run the script without
			 arguments for usage message.

# Create a text file listing paths towards the log directories, one per 
	line (preferably in localsettings.LISTS_DIR, although whether you put it
	in this directory or elsewhere, probably has no impact).

# Open the web interface of your application and navigate to dialogue 
	import (through an option in the menu at the first page after login, or 
	through the Dialogues->Add option of the Admin app). Specify the path 
	towards the file listing your dialogues, any other options as required, 
	and press the button. Depending on the number of dialogues imported, you 
	might have to wait a considerable amount of time until the page with 
	a import report loads.
